import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get About => "About";
  String get Agent_Config => "Agent Config";
  String get Agent_Select => "Agent Select";
  String get Agent_Settings => "Agent Settings";
  String get Agent_Type => "Agent Type";
  String get Agents => "Agents";
  String get AliPay => "AliPay";
  String get AliPay_feilong => "614183595@qq.com";
  String get AppName => "AVIS";
  String get Article => "Article";
  String get Backup => "Backup";
  String get Backup_Data => "Backup Data";
  String get Backup_Data_Summary => "Backup history and favorite data.";
  String get Backup_Source => "Backup Source";
  String get Backup_config => "Backup config";
  String get Base_Info => "Base Info";
  String get Config => "Config";
  String get Donate => "Donate";
  String get Download => "Download";
  String get Dry_Run => "Dry Run";
  String get FEILONG => "FeiLong";
  String get FEILONGBLOG => "https://feilong.home.blog";
  String get Favorite => "Favorite";
  String get GITHUB => "https://github.com/feilongfl/AVIS";
  String get GITHUBRELEASE => "https://github.com/feilongfl/AVIS/releases";
  String get GitHub => "Github";
  String get History => "History";
  String get Image => "Image";
  String get Loading => "Loading";
  String get Loading_Failed => "Loading Failed";
  String get NULL => "NULL";
  String get No_Agent => "No Agent";
  String get Normal_Config => "Normal Config";
  String get Paypal => "Paypal";
  String get Paypal_feilong => "https://www.paypal.me/feilongpay";
  String get Release => "Release";
  String get Restory_Data => "Restory Data";
  String get Restory_Data_Summary => "Restory history and favorite data.";
  String get Restory_Source => "Restory Source";
  String get Restory_config => "Restory config";
  String get Save => "Save";
  String get Search => "Search";
  String get Search_Author => "Search Author";
  String get Search_title => "Search title";
  String get Settings => "Settings";
  String get Share => "Share";
  String get Sound => "Sound";
  String get Source_Edit => "Source Edit";
  String get Source_Name => "Source Name";
  String get Source_Name_hint => "Input source name.";
  String get Source_Settings => "Source Settings";
  String get Source_Type => "Source Type";
  String get Source_UUID => "Source UUID";
  String get Source_UUID_hint => "Source UUID.";
  String get Source_Url => "Source Url";
  String get Source_Url_hint => "Input source web url.";
  String get Sources => "Sources";
  String get Video => "Video";
  String get WeChat => "WeChat";
  String get WeChat_feilong => "feilong_wx";
  String get defaultKeywords => "UnknowKeywords";
  String get finishTip_isFin => "Finish";
  String get finishTip_notFin => "not Finish";
  String get tip_copied_account => "Account copied to Clipboard";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
